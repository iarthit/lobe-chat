name: Build and Push Docker Image with Hash

on:
  schedule:
    - cron: "0 18 * * *" # UTC 18:00 = 上海时间 02:00
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 恢复缓存中的上次提交哈希
      - name: Restore last commit hash from cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: last_commit.txt
          key: last-commit-${{ github.sha }}
          restore-keys: |
            last-commit-

      # 3. 检查目标仓库是否有更新
      - name: Check for updates in target repository
        id: check_updates
        run: |
          git clone --depth=1 --branch main https://github.com/lobehub/lobe-chat.git target-repo
          cd target-repo
          LATEST_COMMIT=$(git rev-parse HEAD)
          cd ..

          if [ -f "last_commit.txt" ]; then
            LAST_KNOWN_COMMIT=$(cat last_commit.txt)
            echo "Last known commit: $LAST_KNOWN_COMMIT"
          else
            LAST_KNOWN_COMMIT=""
            echo "No previous commit hash found (first run or cache miss)."
          fi

          if [ "$LATEST_COMMIT" != "$LAST_KNOWN_COMMIT" ]; then
            echo "Changes detected: $LATEST_COMMIT"
            echo "$LATEST_COMMIT" > last_commit.txt
            echo "updated=true" >> "$GITHUB_ENV"
          else
            echo "No changes detected, skipping build."
            echo "updated=false" >> "$GITHUB_ENV"
          fi

      # 4. 复制文件（仅在有更新时）
      - name: Copy files from target repository
        if: env.updated == 'true'
        run: |
          cp -r target-repo/. .
          rm -rf target-repo

      # 5. 修改 Dockerfile（仅在有更新时）
      - name: Modify Dockerfile.database
        if: env.updated == 'true'
        run: |
          sed -i '/ENV NODE_OPTIONS=.*max-old-space-size/a ENV NEXT_PUBLIC_ENABLE_NEXT_AUTH=0\nENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\nENV CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}' Dockerfile.database

      # 6. 登录 Docker Hub
      - name: Login to Docker Hub
        if: env.updated == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        if: env.updated == 'true'
        run: |
          docker build -f Dockerfile.database --cache-from ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

          CURRENT_DATE=$(TZ='Asia/Shanghai' date +%Y%m%d)

          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$CURRENT_DATE

          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$CURRENT_DATE

      # 8. 缓存最新的提交哈希
      - name: Cache last commit hash
        if: env.updated == 'true'
        uses: actions/cache@v4
        with:
          path: last_commit.txt
          key: last-commit-${{ github.sha }}

      - name: Clean up
        if: always()
        run: |
          rm -rf target-repo
