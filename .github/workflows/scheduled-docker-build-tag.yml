name: Build and Push Docker Image with Tag

on:
  schedule:
    - cron: "0 18 * * 1" # UTC 18:00 = 北京时间 02:00
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库代码
      # 这一步是为了能够读取和写入 CHANGELOG.md 文件，并提交回本仓库
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          ref: main

      # 2. 恢复缓存中的上次 Tag 版本
      - name: Restore last tag version from cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: last_tag.txt
          key: last-tag-${{ github.run_id }} # 使用 run_id 确保每次运行都能尝试保存
          restore-keys: |
            last-tag-

      # 3. 检查目标仓库的最新 Tag
      - name: Check for new tags in target repository
        id: check_tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # 使用自定义的 Secret
        run: |
          # 使用 GitHub API 获取最新的 Tag
          LATEST_TAG=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/lobehub/lobe-chat/tags | jq -r '.[0].name')
          echo "Latest tag from remote: $LATEST_TAG"

          if [ -f "last_tag.txt" ]; then
            LAST_KNOWN_TAG=$(cat last_tag.txt)
            echo "Last known tag from cache: $LAST_KNOWN_TAG"
          else
            LAST_KNOWN_TAG=""
            echo "No previous tag version found (first run or cache miss)."
          fi

          if [ "$LATEST_TAG" != "$LAST_KNOWN_TAG" ]; then
            echo "New tag detected: $LATEST_TAG"
            echo "$LATEST_TAG" > last_tag.txt
            echo "updated=true" >> "$GITHUB_ENV"
            echo "TAG_NAME=$LATEST_TAG" >> "$GITHUB_ENV"
          else
            echo "No new tag detected, skipping build."
            echo "updated=false" >> "$GITHUB_ENV"
          fi

      # 4. 克隆指定 Tag 的目标仓库代码（仅在有新 Tag 时）
      # 将 lobehub/lobe-chat 克隆到一个单独的目录，避免污染当前仓库的工作区
      - name: Clone target repository at tag
        if: env.updated == 'true'
        run: |
          git clone --depth=1 --branch ${{ env.TAG_NAME }} https://github.com/lobehub/lobe-chat.git cloned-lobe-chat

      # 5. 修改 Dockerfile（仅在有新 Tag 时）
      - name: Modify Dockerfile.database in cloned repository
        if: env.updated == 'true'
        run: |
          sed -i '/ENV NODE_OPTIONS=.*max-old-space-size/a ENV NEXT_PUBLIC_ENABLE_NEXT_AUTH=0\nENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\nENV CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}' cloned-lobe-chat/Dockerfile.database

      # 6. 更新 CHANGELOG.md (新增加的步骤)
      - name: Update CHANGELOG.md
        if: env.updated == 'true'
        run: |
          NEW_CHANGELOG_BLOCK="$(printf '## Version %s - %s\n\n' "${{ env.TAG_NAME }}" "$(date +'%Y-%m-%d')")"
          CHANGELOG_CONTENT="${NEW_CHANGELOG_BLOCK}$(cat CHANGELOG.md 2>/dev/null)"
          echo "$CHANGELOG_CONTENT" > CHANGELOG.md

      # 7. 提交并推送 CHANGELOG (新增加的步骤)
      - name: Commit and Push CHANGELOG
        if: env.updated == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add CHANGELOG.md
          # 检查是否有文件变动，避免在没有变动时执行提交
          if ! git diff --staged --quiet; then
            git commit -m "docs: Update version ${{ env.TAG_NAME }}"
            git push
          else
            echo "CHANGELOG.md was not modified."
          fi

      # 8. 登录 Docker Hub
      - name: Login to Docker Hub
        if: env.updated == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. 构建并推送 Docker 镜像
      # 使用克隆的 lobe-chat 仓库作为构建上下文
      - name: Build and push Docker image
        if: env.updated == 'true'
        run: |
          docker build -f cloned-lobe-chat/Dockerfile.database --cache-from ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest cloned-lobe-chat

          TAG_NAME=${{ env.TAG_NAME }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$TAG_NAME

          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$TAG_NAME

      # 10. 缓存最新的 Tag 版本
      - name: Cache last tag version
        if: env.updated == 'true'
        uses: actions/cache@v4
        with:
          path: last_tag.txt
          key: last-tag-${{ github.run_id }} # 确保这次运行的 tag 被保存

      # 11. 清理
      - name: Clean up
        if: always()
        run: |
          # 清理可能存在的残留文件
          rm -rf cloned-lobe-chat
