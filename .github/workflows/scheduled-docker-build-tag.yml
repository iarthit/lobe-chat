name: Build and Push Docker Image with Tag

on:
  schedule:
    - cron: "0 18 * * 1" # UTC 18:00 = 上海时间 02:00
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 恢复缓存中的上次 Tag 版本
      - name: Restore last tag version from cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: last_tag.txt
          key: last-tag-${{ github.sha }}
          restore-keys: |
            last-tag-

      # 3. 检查目标仓库的最新 Tag
      - name: Check for new tags in target repository
        id: check_tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # 使用自定义的 Secret
        run: |
          # 使用 GitHub API 获取最新的 Tag，并添加认证
          LATEST_TAG=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/lobehub/lobe-chat/tags | jq -r '.[0].name')
          echo "Latest tag: $LATEST_TAG"

          if [ -f "last_tag.txt" ]; then
            LAST_KNOWN_TAG=$(cat last_tag.txt)
            echo "Last known tag: $LAST_KNOWN_TAG"
          else
            LAST_KNOWN_TAG=""
            echo "No previous tag version found (first run or cache miss)."
          fi

          if [ "$LATEST_TAG" != "$LAST_KNOWN_TAG" ]; then
            echo "New tag detected: $LATEST_TAG"
            echo "$LATEST_TAG" > last_tag.txt
            echo "updated=true" >> "$GITHUB_ENV"
            echo "TAG_NAME=$LATEST_TAG" >> "$GITHUB_ENV"
          else
            echo "No new tag detected, skipping build."
            echo "updated=false" >> "$GITHUB_ENV"
          fi

      # 4. 检出指定 Tag 的代码（仅在有新 Tag 时）
      - name: Checkout target repository at tag
        if: env.updated == 'true'
        run: |
          git clone --depth=1 --branch ${{ env.TAG_NAME }} https://github.com/lobehub/lobe-chat.git target-repo
          cp -r target-repo/. .
          rm -rf target-repo

      # 5. 修改 Dockerfile（仅在有新 Tag 时）
      - name: Modify Dockerfile.database
        if: env.updated == 'true'
        run: |
          sed -i '/ENV NODE_OPTIONS=.*max-old-space-size/a ENV NEXT_PUBLIC_ENABLE_NEXT_AUTH=0\nENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\nENV CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}' Dockerfile.database

      # 6. 登录 Docker Hub
      - name: Login to Docker Hub
        if: env.updated == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        if: env.updated == 'true'
        run: |
          docker build -f Dockerfile.database --cache-from ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .

          TAG_NAME=${{ env.TAG_NAME }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$TAG_NAME

          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:$TAG_NAME

      - name: Update README with build log
        if: env.updated == 'true'
        run: |
          # 设置 Git 配置
          git checkout main
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 添加日志到 README.md
          echo -e "\n### Build Log\n- $(date '+%Y-%m-%d %H:%M:%S') Built and pushed Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ env.TAG_NAME }}" >> README.md

          # 提交更改
          git add README.md
          git commit -m "Update README with build log for ${{ env.TAG_NAME }}"
          git push origin main
      # 8. 缓存最新的 Tag 版本
      - name: Cache last tag version
        if: env.updated == 'true'
        uses: actions/cache@v4
        with:
          path: last_tag.txt
          key: last-tag-${{ github.sha }}

      # 9. 清理
      - name: Clean up
        if: always()
        run: |
          rm -rf target-repo
