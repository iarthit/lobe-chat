name: Build and Push Docker Image

on:
  schedule:
    - cron: "0 18 * * *" # UTC 18:00 = 上海时间 02:00
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 下载上次的提交哈希（如果存在）
      - name: Download last commit hash
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: last_commit
          path: ./
        continue-on-error: true  # 允许失败，不影响后续步骤

      - name: Check downloaded artifact
        run: |
          echo "Attempting to download last_commit artifact..."
          ls -la  # 调试：列出当前目录文件
          if [ -f "last_commit.txt" ]; then
            echo "Download successful, last_commit.txt found:"
            cat last_commit.txt
          else
            echo "Download failed or no artifact available."
          fi

      # 4. 复制文件（仅在有更新时）
      - name: Copy files from target repository
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          cp -r target-repo/. .
          rm -rf target-repo

      # 5. 修改 Dockerfile（仅在有更新时）
      - name: Modify Dockerfile.database
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          sed -i '/ENV NODE_OPTIONS=.*max-old-space-size/a ENV ENV NEXT_PUBLIC_ENABLE_NEXT_AUTH=0\nENV ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\nENV CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}' Dockerfile.database

      # 8. 上传最新的提交哈希（仅在有更新时）
      - name: Upload last commit hash
        if: steps.check_updates.outputs.updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: last_commit # artifact 名称
          path: last_commit.txt # 上传的文件
