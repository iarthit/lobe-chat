name: Build and Push Docker Image

on:
  schedule:
    - cron: "0 18 * * *" # UTC 18:00 = 上海时间 02:00
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 下载上次的提交哈希（如果存在）
      - name: Download last commit hash
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: last_commit
          path: ./
        continue-on-error: true  # 允许失败，不影响后续步骤

      - name: Check downloaded artifact
        run: |
          echo "Attempting to download last_commit artifact..."
          ls -la  # 调试：列出当前目录文件
          if [ -f "last_commit.txt" ]; then
            echo "Download successful, last_commit.txt found:"
            cat last_commit.txt
          else
            echo "Download failed or no artifact available."
          fi

      # 3. 检查目标仓库是否有更新
      - name: Check for updates in target repository
        id: check_updates
        run: |
          # 克隆目标仓库并指定分支
          git clone --branch main https://github.com/lobehub/lobe-chat.git target-repo
          cd target-repo
          LATEST_COMMIT=$(git rev-parse HEAD)  # 获取目标分支最新提交哈希
          cd ..

          # 检查是否存在上次的提交哈希文件
          if [ -f "last_commit.txt" ]; then
            LAST_KNOWN_COMMIT=$(cat last_commit.txt)
            echo "Last known commit: $LAST_KNOWN_COMMIT"
          else
            LAST_KNOWN_COMMIT=""
            echo "No previous commit hash found (first run or no artifact)."
          fi

          # 比较哈希，判断是否有更新
          if [ "$LATEST_COMMIT" != "$LAST_KNOWN_COMMIT" ]; then
            echo "Changes detected: $LATEST_COMMIT"
            echo "$LATEST_COMMIT" > last_commit.txt  # 更新哈希文件
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected, skipping build."
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      # 4. 复制文件（仅在有更新时）
      - name: Copy files from target repository
        run: |
          cp -r target-repo/. .
          rm -rf target-repo

      # 5. 修改 Dockerfile（仅在有更新时）
      - name: Modify Dockerfile.database
        run: |
          sed -i '/ENV NODE_OPTIONS=.*max-old-space-size/a ENV ENV NEXT_PUBLIC_ENABLE_NEXT_AUTH=0\nENV ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}\nENV CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}' Dockerfile.database
          cat Dockerfile.database

      # 8. 上传最新的提交哈希（仅在有更新时）
      - name: Upload last commit hash
        uses: actions/upload-artifact@v4
        with:
          name: last_commit # artifact 名称
          path: last_commit.txt # 上传的文件
